name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.13"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
        
    - name: Install dependencies
      run: |
        uv sync
        
    - name: Lint with flake8
      run: |
        uv run flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        uv run flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
        
    - name: Type check with mypy
      run: |
        uv run mypy src/
        
    - name: Test with pytest
      run: |
        uv run pytest tests/ -v --cov=eol_rebaser --cov-report=xml
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: true

  build-rpm:
    runs-on: ubuntu-latest
    needs: test
    container:
      image: fedora:latest
      
    steps:
    - uses: actions/checkout@v4
    
    - name: Install RPM build dependencies
      run: |
        dnf install -y rpm-build python3-devel python3-setuptools python3-pip systemd-rpm-macros
        
    - name: Build RPM
      run: |
        ./build_rpm.sh
        
    - name: Upload RPM artifacts
      uses: actions/upload-artifact@v3
      with:
        name: rpm-packages
        path: build/RPMS/
        
  validate-config:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'
        
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      
    - name: Install package
      run: |
        uv sync
        
    - name: Validate configuration files
      run: |
        uv run python -c "
        from src.eol_rebaser.config import ConfigManager
        import sys
        from pathlib import Path
        
        try:
            config_manager = ConfigManager(Path('data/migrations.conf'))
            config = config_manager.load_config()
            print(f'Successfully validated configuration with {len(config[\"migrations\"])} migrations')
        except Exception as e:
            print(f'Configuration validation failed: {e}')
            sys.exit(1)
        "
